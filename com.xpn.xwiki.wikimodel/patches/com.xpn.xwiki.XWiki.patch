Index: /home/sebastocha/Workspace2/com.xpn.xwiki/core/src/main/java/com/xpn/xwiki/XWiki.java
===================================================================
--- /home/sebastocha/Workspace2/com.xpn.xwiki/core/src/main/java/com/xpn/xwiki/XWiki.java	(revision 2655)
+++ /home/sebastocha/Workspace2/com.xpn.xwiki/core/src/main/java/com/xpn/xwiki/XWiki.java	(working copy)
@@ -73,7 +73,30 @@
 import org.exoplatform.container.RootContainer;
 import org.hibernate.HibernateException;
 import org.securityfilter.filter.URLPatternMatcher;
+import java.io.StringReader;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Properties;
+import org.semanticdesktop.rdf.RdfException;
+import org.semanticdesktop.rdf.impl.ISesame2Const;
+import org.semanticdesktop.rdf.impl.RdfRepository;
+import org.semanticdesktop.wiki.core.WikiAdapterManager;
+import org.semanticdesktop.wiki.core.WikiResource;
+import org.semanticdesktop.wiki.core.WikiResourceAdapter;
+import org.semanticdesktop.wiki.core.adapter.html.DefaultWikiLinkFormatter;
+import org.semanticdesktop.wiki.core.adapter.html.IWikiLinkFormatter;
+import org.semanticdesktop.wiki.core.adapter.semantic.ILinkTranslator;
+import org.semanticdesktop.wiki.core.adapter.semantic.SemanticWikiPageFactory;
+import org.semanticdesktop.wiki.core.adapter.semantic.TripleIndex;
+import org.semanticdesktop.wiki.core.adapter.source.SourceWikiPage;
+import org.semanticdesktop.wiki.core.adapter.source.SourceWikiPageFactory;
+import org.semanticdesktop.wikimodel.WikiParserException;
+import org.semanticdesktop.wikimodel.wom.IWikiNodeFactory;
+import org.semanticdesktop.wikimodel.wom.impl.WikiNodeFactory;
 
+import com.mandriva.util.OpResult;
+import com.xpn.xwiki.wikimodel.XWikiAdapter;
+import com.xpn.xwiki.wikimodel.XWikiAdapterFactory;
 import com.xpn.xwiki.api.Api;
 import com.xpn.xwiki.api.Document;
 import com.xpn.xwiki.api.User;
@@ -85,6 +108,9 @@
 import com.xpn.xwiki.doc.XWikiAttachment;
 import com.xpn.xwiki.doc.XWikiDocument;
 import com.xpn.xwiki.doc.XWikiDocumentArchive;
+import com.xpn.xwiki.email.Email;
+import com.xpn.xwiki.email.XWikiEmailService;
+import com.xpn.xwiki.email.XWikiEmailServiceImpl;
 import com.xpn.xwiki.notify.DocObjectChangedRule;
 import com.xpn.xwiki.notify.PropertyChangedRule;
 import com.xpn.xwiki.notify.XWikiActionRule;
@@ -670,6 +696,21 @@
         // HACK: can anyone think of a better way to do this?
         XWikiCacheListener.setXWiki(this);
 
+        try {
+            fRepository = new RdfRepository();
+            Properties properties = new Properties();
+            File file = new File("/home/sebastocha/test.db/", "rdfindex.bin");
+            file.getParentFile().mkdirs();
+            properties.put(ISesame2Const.KEY_SESAME_FILE_NAME, file.getAbsolutePath());
+            fRepository.open(properties);
+            initAdapterFactories();
+            // :SL:SemanticWrapperManager.init(this);
+            // TripleIndexManager.init(this);
+        } catch (Exception e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+
         // Make sure these classes exists
         if (noupdate) {
             getPrefsClass(context);
@@ -1125,7 +1166,10 @@
 
     public List getClassList(XWikiContext context) throws XWikiException
     {
-        return getStore().getClassList(context);
+        //:SL:
+        List classList = getStore().getClassList(context);
+        Collections.sort(classList);
+        return classList;
     }
 
     /*
@@ -1569,9 +1613,14 @@
             BaseObject object =
                 doc.getObject("XWiki.XWikiPreferences", "language", context.getLanguage(), true);
             String result = "";
-            try {
+            //:SL:
+            if (object != null) {
+                try {
                 result = object.getStringValue(prefname);
-            } catch (Exception e) {
+                } catch (Exception e) {
+                   
+                }
+                
             }
 
             if (!result.equals(""))
@@ -2820,7 +2869,8 @@
     {
         BaseClass rclass = getRightsClass(context);
         // Add protection to the page
-        BaseObject newrightsobject = (BaseObject) rclass.newObject(context);
+        
+        /*BaseObject newrightsobject = (BaseObject) rclass.newObject(context);
         newrightsobject.setClassName(rclass.getName());
         newrightsobject.setName(fullwikiname);
         newrightsobject.setStringValue("groups", "XWiki.XWikiAdminGroup");
@@ -2826,7 +2876,7 @@
         newrightsobject.setStringValue("groups", "XWiki.XWikiAdminGroup");
         newrightsobject.setStringValue("levels", userRights);
         newrightsobject.setIntValue("allow", 1);
-        doc.addObject(rclass.getName(), newrightsobject);
+        doc.addObject(rclass.getName(), newrightsobject);*/
 
         BaseObject newuserrightsobject = (BaseObject) rclass.newObject(context);
         newuserrightsobject.setClassName(rclass.getName());
@@ -2832,6 +2882,7 @@
         newuserrightsobject.setClassName(rclass.getName());
         newuserrightsobject.setName(fullwikiname);
         newuserrightsobject.setStringValue("users", fullwikiname);
+        newuserrightsobject.setStringValue("groups", "XWiki.XWikiAdminGroup");
         newuserrightsobject.setStringValue("levels", userRights);
         newuserrightsobject.setIntValue("allow", 1);
         doc.addObject(rclass.getName(), newuserrightsobject);
@@ -2967,9 +3018,9 @@
                         includecounter = new Integer(1);
                         context.put("include_counter", includecounter);
                     }
-
+//:SL:
                     if ((includecounter.intValue() > 30)
-                        || ((database.equals(incdatabase) && (topic.equals(currentdoc
+                        || ((database != null && incdatabase != null && database.equals(incdatabase) && (topic.equals(currentdoc
                             .getFullName()))))) {
                         log.warn("Error on too many recursive includes for topic " + topic);
                         return "Cannot make recursive include";
@@ -2993,6 +3044,12 @@
 
             XWikiDocument contentdoc = doc.getTranslatedDocument(context);
 
+            XWikiAdapter xresource = null;
+            if (hasRdfStore(context)) {
+                WikiResource resource = getWikiResource(contentdoc);
+                xresource = (XWikiAdapter) resource.getAdapter(XWikiAdapter.class);
+            }
+
             if (isForm) {
                 // We do everything in the context of the including document
                 if (database != null)
@@ -2997,6 +3054,8 @@
                 // We do everything in the context of the including document
                 if (database != null)
                     context.setDatabase(database);
+                if (hasRdfStore(context))
+                    return xresource.toHtml(context);
                 return getRenderingEngine().renderText(contentdoc.getContent(), contentdoc,
                     (XWikiDocument) context.get("doc"), context);
             } else {
@@ -3001,6 +3060,8 @@
                     (XWikiDocument) context.get("doc"), context);
             } else {
                 // We stay in the context included document
+                if (hasRdfStore(context))
+                    return xresource.toHtml(context);
                 return getRenderingEngine().renderText(contentdoc.getContent(), contentdoc, doc,
                     context);
             }
@@ -3048,6 +3109,16 @@
         getStore().deleteXWikiDoc(doc, context);
         getNotificationManager().verify(doc, new XWikiDocument(doc.getSpace(), doc.getName()),
             XWikiDocChangeNotificationInterface.EVENT_CHANGE, context);
+        removeFromTripleIndex(doc, context);
+    }
+
+    private void removeFromTripleIndex(XWikiDocument doc, XWikiContext context)
+    {
+        // :SL: if (hasRdfStore(context)) {
+        // SemanticWrapper swrapper = SemanticWrapperManager.getInstance().getWrapper(doc, context);
+        // swrapper.removeSubjectStatements();
+        // }
+
     }
 
     public String getDatabase()
@@ -3719,6 +3790,14 @@
         XWikiDocument tdoc = doc.getTranslatedDocument(context);
         context.put("tdoc", tdoc);
         vcontext.put("tdoc", tdoc.newDocument(context));
+        if (context.getWiki().hasRdfStore(context)) {
+                WikiResource resource = getWikiResource(doc);
+                for (Object obj : resource.getAllAdapters()) {
+                    WikiResourceAdapter adapter = (WikiResourceAdapter) obj;
+                    vcontext.put(adapter.getAdapterName(), adapter);
+                }
+
+            }
         return true;
     }
 
@@ -5062,6 +5141,10 @@
 
     public boolean hasVersioning(String fullName, XWikiContext context)
     {
+        //:SL: don't version user documents nor useradministration documents
+        if (fullName.indexOf("XWiki.") == 0 || fullName.indexOf("Administration.") == 0)
+            return false;
+        
         return ("1".equals(context.getWiki().Param("xwiki.store.versioning", "1")));
     }
 
@@ -5070,4 +5153,170 @@
         doc.setFullName(fullName, context);
         return doc.getExternalAttachmentURL(filename, "download", context);
     }
+
+    public boolean hasRdfStore(XWikiContext context)
+    {
+        XWikiDocument wikiServer = context.getWikiServer();
+        if (wikiServer != null) {
+            XWikiDocument cdoc = context.getDoc();
+            /*
+             * try { XWikiDocument xexclude = getDocument("Main.Exclude", context); if (xexclude !=
+             * null && xexclude.getContent().indexOf(cdoc.getFullName()) >= 0) return false; } catch
+             * (XWikiException e) { return false; }
+             */
+            String space = cdoc.getSpace();
+            if (space.equals("Panels") || space.equals("XWiki"))
+                return false;
+            String description =
+                wikiServer.getStringValue("XWiki.XWikiServerClass", "description");
+            if (description != null && description.equals("WithRdfStore")) {
+                return true;
+            }
+
+        }
+        return false;
+    }
+
+    protected void initAdapterFactories() throws RdfException
+    {
+        IWikiLinkFormatter linkFormatter = new DefaultWikiLinkFormatter();
+        // WikiAdapterManager.register(new HtmlWikiPageFactory(linkFormatter));
+        WikiAdapterManager.register(new SourceWikiPageFactory());
+        TripleIndex index = new TripleIndex(fRepository, new XWikiLinkTranslator());
+        WikiAdapterManager.register(new SemanticWikiPageFactory(index));
+        WikiAdapterManager.register(new XWikiAdapterFactory());
+    }
+
+    public class XWikiLinkTranslator implements ILinkTranslator
+    {
+
+        public String getLinkFromUri(String uri)
+        {
+            if (uri.startsWith("wiki:")) {
+                uri = uri.substring("wiki:".length());
+                if (uri.startsWith("Main."))
+                    uri = uri.substring("Main.".length());
+            }
+            return uri;
+        }
+
+        public String getUriFromLink(String link)
+        {
+            if (link.startsWith("http:") || link.startsWith("https:") || link.startsWith("ftp:")
+                || link.startsWith("mailto:"))
+                return link;
+            if (link.indexOf("Main.") < 0)
+                link = "Main." + link;
+            return "wiki:" + link;
+        }
+
+    }
+
+    protected void finalize()
+    {
+        try {
+            fRepository.close();
+        } catch (RdfException e) {
+            // TODO Auto-generated catch block
+            log.error(e);
+            e.printStackTrace();
+        }
+
+    }
+
+    protected void addToTripleIndex(XWikiDocument doc, XWikiContext context)
+    {
+        if (!hasRdfStore(context))
+            return;
+
+        try {
+            String content = doc.getContent();
+            WikiResource resource = getWikiResource(doc);
+            SourceWikiPage source = (SourceWikiPage) resource.getAdapter(SourceWikiPage.class);
+            source.setSource(new StringReader(content));
+            resource.store(null);
+
+        } catch (WikiParserException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+
+    }
+
+    public WikiResource getWikiResource(XWikiDocument doc)
+    {
+        try {
+            WikiResource resource = (WikiResource) doc.getCustomData("wikiResource");
+            // :SL:TODO: j'ai enlevé ça sinon la WikiResource d'un doc garde un content inchangé
+            // quand on modifie le doc
+            // if (resource == null) {
+            URI uri = getDocUri(doc);
+            IWikiNodeFactory nodeFactory = new WikiNodeFactory();
+            resource = new WikiResource(nodeFactory, uri);
+            String content = doc.getContent();
+            SourceWikiPage source = (SourceWikiPage) resource.getAdapter(SourceWikiPage.class);
+            source.setSource(new StringReader(content));
+            doc.setCustomData("wikiResource", resource);
+            XWikiAdapter adapter = (XWikiAdapter) resource.getAdapter(XWikiAdapter.class);
+            adapter.setXWikiDocument(doc);
+            // }
+            return resource;
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    private URI getDocUri(XWikiDocument doc)
+    {
+        String uri = URLEncoder.encode(doc.getFullName());
+
+        try {
+            return new URI(uri);
+        } catch (URISyntaxException e) {
+            return null;
+        }
+    }
+
+    private RdfRepository fRepository;
+    
+    public OpResult sendEmail(String subject, String content, String fromAddr, String toAddr, String bccAddr,
+        XWikiContext context) throws XWikiException {
+    Email email = new Email();
+    email.setSubject(subject);
+    email.setMessage(content);
+    email.setFrom(fromAddr);
+    email.setTo(toAddr);
+    email.setBcc(bccAddr);
+    // email.subject, content,fromAddr, toAddr, bccAddr
+    boolean result = getEmailService().sendEmail(email, context);
+    OpResult opResult = new OpResult(-1, "ErrorSending");
+    if (result) {
+        opResult.setCode(1);
+        opResult.setMessage("YourMessageHasBeenSent");
+    }
+
+    return opResult;
+    }
+    
+    public XWikiEmailService getEmailService() {
+        if (emailService == null) {
+            String emailServiceClass = Param("xwiki.email.service",
+                    "com.xpn.xwiki.email.XWikiEmailServiceImpl");
+            try {
+                emailService = (XWikiEmailService) Class.forName(emailServiceClass).newInstance();
+            } catch (Exception e) {
+                e.printStackTrace();
+                emailService = new XWikiEmailServiceImpl();
+            }
+        }
+        return emailService;
+    }
+    protected XWikiEmailService emailService;
+
+
+
 }
